require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"flipComponent":[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
"FlipComponent\n\nfrontLayer <layer>\nbackLayer <layer>\n\nflip()\nflipToFront()\nflipToBack()";
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.FlipComponent = (function(superClass) {
  var FlipDirection, States;

  extend(FlipComponent, superClass);

  States = {
    Front: "frontState",
    Back: "backState"
  };

  FlipDirection = {
    Right: "right",
    Left: "left",
    Top: "top",
    Bottom: "bottom"
  };

  function FlipComponent(options) {
    if (options == null) {
      options = {};
    }
    FlipComponent.__super__.constructor.apply(this, arguments);
    options = _.defaults(options, {
      x: 0,
      y: 0,
      width: 100,
      height: 100,
      flipDirection: FlipDirection.Right,
      curve: "spring(300, 50, 0)",
      autoFlip: true,
      perspective: 1000
    });
    this.width = options.width;
    this.height = options.height;
    if (options.front == null) {
      options.front = new Layer({
        backgroundColor: "white"
      });
    }
    if (options.back == null) {
      options.back = new Layer({
        backgroundColor: "white"
      });
    }
    this.front = options.front;
    this.back = options.back;
    this.perspective = options.perspective;
    this.style["-webkit-transform-style"] = "preserve-3d";
    this._state = States.Front;
    this.flipDirection = options.flipDirection;
    this.autoFlip = options.autoFlip;
    this.curve = options.curve;
    this.backgroundColor = null;
    this.clip = false;
    this.on(Events.Click, function() {
      if (this.autoFlip) {
        return this.flip();
      }
    });
    this.on("change:width", (function(_this) {
      return function() {
        _this._front.width = _this.width;
        return _this._back.width = _this.width;
      };
    })(this));
    this.on("change:height", (function(_this) {
      return function() {
        _this._front.height = _this.height;
        return _this._back.height = _this.height;
      };
    })(this));
  }

  FlipComponent.prototype.state = function() {
    return this._state;
  };

  FlipComponent.define("front", {
    get: function() {
      return this._front;
    },
    set: function(layer) {
      var ref;
      if ((ref = this._front) != null) {
        ref.destroy();
      }
      this._front = layer;
      this._front.point = {
        x: 0,
        y: 0
      };
      this._front.width = this.width;
      this._front.height = this.height;
      this._front.superLayer = this;
      return this._front.style.webkitBackfaceVisibility = "hidden";
    }
  });

  FlipComponent.define("back", {
    get: function() {
      return this._back;
    },
    set: function(layer) {
      var ref;
      if ((ref = this._back) != null) {
        ref.destroy();
      }
      this._back = layer;
      this._back.point = {
        x: 0,
        y: 0
      };
      this._back.width = this.width;
      this._back.height = this.height;
      this._back.superLayer = this;
      return this._back.style.webkitBackfaceVisibility = "hidden";
    }
  });

  FlipComponent.define("flipDirection", {
    get: function() {
      return this._flipDirection;
    },
    set: function(direction) {
      this._flipDirection = direction;
      this._back.rotationY = 0;
      this._back.rotationX = 0;
      this._front.rotationY = 0;
      this._front.rotationX = 0;
      if (this._state === States.Front) {
        if (direction === FlipDirection.Right) {
          return this._back.rotationY = 180;
        } else if (direction === FlipDirection.Left) {
          return this._back.rotationY = -180;
        } else if (direction === FlipDirection.Top) {
          return this._back.rotationX = 180;
        } else {
          return this._back.rotationX = -180;
        }
      } else {
        if (direction === FlipDirection.Right) {
          return this._front.rotationY = -180;
        } else if (direction === FlipDirection.Left) {
          return this._front.rotationY = 180;
        } else if (direction === FlipDirection.Top) {
          return this._front.rotationX = -180;
        } else {
          return this._front.rotationX = 180;
        }
      }
    }
  });

  FlipComponent.prototype.flip = function() {
    if (this._state === States.Front) {
      return this.flipToBack();
    } else {
      return this.flipToFront();
    }
  };

  FlipComponent.prototype.flipToFront = function() {
    var props;
    if (this._state === States.Back) {
      this._state = States.Front;
      props = {};
      if (this.flipDirection === FlipDirection.Right) {
        props.rotationY = 180;
      } else if (this.flipDirection === FlipDirection.Left) {
        props.rotationY = -180;
      } else if (this.flipDirection === FlipDirection.Top) {
        props.rotationX = 180;
      } else if (this.flipDirection === FlipDirection.Bottom) {
        props.rotationX = -180;
      }
      this._front.animate({
        properties: {
          rotationY: 0,
          rotationX: 0
        },
        curve: this.curve
      });
      return this._back.animate({
        properties: props,
        curve: this.curve
      });
    }
  };

  FlipComponent.prototype.flipToBack = function() {
    var props;
    if (this._state === States.Front) {
      this._state = States.Back;
      props = {};
      if (this.flipDirection === FlipDirection.Right) {
        props.rotationY = -180;
      } else if (this.flipDirection === FlipDirection.Left) {
        props.rotationY = 180;
      } else if (this.flipDirection === FlipDirection.Top) {
        props.rotationX = -180;
      } else if (this.flipDirection === FlipDirection.Bottom) {
        props.rotationX = 180;
      }
      this._front.animate({
        properties: props,
        curve: this.curve
      });
      return this._back.animate({
        properties: {
          rotationY: 0,
          rotationX: 0
        },
        curve: this.curve
      });
    }
  };

  return FlipComponent;

})(Layer);

},{}],"flipComponent":[function(require,module,exports){
"FlipComponent\n\nfrontLayer <layer>\nbackLayer <layer>\n\nflip()\nflipToFront()\nflipToBack()";
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.FlipComponent = (function(superClass) {
  var FlipDirection, States;

  extend(FlipComponent, superClass);

  States = {
    Front: "frontState",
    Back: "backState"
  };

  FlipDirection = {
    Right: "right",
    Left: "left",
    Top: "top",
    Bottom: "bottom"
  };

  function FlipComponent(options) {
    if (options == null) {
      options = {};
    }
    FlipComponent.__super__.constructor.apply(this, arguments);
    options = _.defaults(options, {
      x: 0,
      y: 0,
      width: 100,
      height: 100,
      flipDirection: FlipDirection.Right,
      curve: "spring(300, 50, 0)",
      autoFlip: true,
      perspective: 1000
    });
    this.width = options.width;
    this.height = options.height;
    if (options.front == null) {
      options.front = new Layer({
        backgroundColor: "white"
      });
    }
    if (options.back == null) {
      options.back = new Layer({
        backgroundColor: "#2dd7aa"
      });
    }
    this.front = options.front;
    this.back = options.back;
    this.perspective = options.perspective;
    this.style["-webkit-transform-style"] = "preserve-3d";
    this._state = States.Front;
    this.flipDirection = options.flipDirection;
    this.autoFlip = options.autoFlip;
    this.curve = options.curve;
    this.backgroundColor = null;
    this.clip = false;
    this.on(Events.Click, function() {
      if (this.autoFlip) {
        return this.flip();
      }
    });
    this.on("change:width", (function(_this) {
      return function() {
        _this._front.width = _this.width;
        return _this._back.width = _this.width;
      };
    })(this));
    this.on("change:height", (function(_this) {
      return function() {
        _this._front.height = _this.height;
        return _this._back.height = _this.height;
      };
    })(this));
  }

  FlipComponent.prototype.state = function() {
    return this._state;
  };

  FlipComponent.define("front", {
    get: function() {
      return this._front;
    },
    set: function(layer) {
      var ref;
      if ((ref = this._front) != null) {
        ref.destroy();
      }
      this._front = layer;
      this._front.point = {
        x: 0,
        y: 0
      };
      this._front.width = this.width;
      this._front.height = this.height;
      this._front.superLayer = this;
      return this._front.style.webkitBackfaceVisibility = "hidden";
    }
  });

  FlipComponent.define("back", {
    get: function() {
      return this._back;
    },
    set: function(layer) {
      var ref;
      if ((ref = this._back) != null) {
        ref.destroy();
      }
      this._back = layer;
      this._back.point = {
        x: 0,
        y: 0
      };
      this._back.width = this.width;
      this._back.height = this.height;
      this._back.superLayer = this;
      return this._back.style.webkitBackfaceVisibility = "hidden";
    }
  });

  FlipComponent.define("flipDirection", {
    get: function() {
      return this._flipDirection;
    },
    set: function(direction) {
      this._flipDirection = direction;
      this._back.rotationY = 0;
      this._back.rotationX = 0;
      this._front.rotationY = 0;
      this._front.rotationX = 0;
      if (this._state === States.Front) {
        if (direction === FlipDirection.Right) {
          return this._back.rotationY = 180;
        } else if (direction === FlipDirection.Left) {
          return this._back.rotationY = -180;
        } else if (direction === FlipDirection.Top) {
          return this._back.rotationX = 180;
        } else {
          return this._back.rotationX = -180;
        }
      } else {
        if (direction === FlipDirection.Right) {
          return this._front.rotationY = -180;
        } else if (direction === FlipDirection.Left) {
          return this._front.rotationY = 180;
        } else if (direction === FlipDirection.Top) {
          return this._front.rotationX = -180;
        } else {
          return this._front.rotationX = 180;
        }
      }
    }
  });

  FlipComponent.prototype.flip = function() {
    if (this._state === States.Front) {
      return this.flipToBack();
    } else {
      return this.flipToFront();
    }
  };

  FlipComponent.prototype.flipToFront = function() {
    var props;
    if (this._state === States.Back) {
      this._state = States.Front;
      props = {};
      if (this.flipDirection === FlipDirection.Right) {
        props.rotationY = 180;
      } else if (this.flipDirection === FlipDirection.Left) {
        props.rotationY = -180;
      } else if (this.flipDirection === FlipDirection.Top) {
        props.rotationX = 180;
      } else if (this.flipDirection === FlipDirection.Bottom) {
        props.rotationX = -180;
      }
      this._front.animate({
        properties: {
          rotationY: 0,
          rotationX: 0
        },
        curve: this.curve
      });
      return this._back.animate({
        properties: props,
        curve: this.curve
      });
    }
  };

  FlipComponent.prototype.flipToBack = function() {
    var props;
    if (this._state === States.Front) {
      this._state = States.Back;
      props = {};
      if (this.flipDirection === FlipDirection.Right) {
        props.rotationY = -180;
      } else if (this.flipDirection === FlipDirection.Left) {
        props.rotationY = 180;
      } else if (this.flipDirection === FlipDirection.Top) {
        props.rotationX = -180;
      } else if (this.flipDirection === FlipDirection.Bottom) {
        props.rotationX = 180;
      }
      this._front.animate({
        properties: props,
        curve: this.curve
      });
      return this._back.animate({
        properties: {
          rotationY: 0,
          rotationX: 0
        },
        curve: this.curve
      });
    }
  };

  return FlipComponent;

})(Layer);


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
